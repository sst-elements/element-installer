name: continuous integration

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        _name:
          - Clang 7
          - Clang 8
          - Clang 9
          - GCC 7
          - GCC 8
          - GCC 9

        include:

          # --------------- Clang on Linux --------------- #

          # Clang 7
          - _name: "Clang 7"
            _cxx: clang++-7
            _pkg: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main"

          # Clang 8
          - _name: "Clang 8"
            _cxx: clang++-8
            _pkg: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"

          # Clang 9
          - _name: "Clang 9"
            _cxx: clang++-9
            _pkg: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"

          # --------------- GCC on Linux --------------- #

          # GCC 7
          - _name: "GCC 7"
            _cxx: g++-7
            _pkg: ppa:ubuntu-toolchain-r/test

          # GCC 8
          - _name: "GCC 8"
            _cxx: g++-8
            _pkg: ppa:ubuntu-toolchain-r/test

          # GCC 9
          - _name: "GCC 9"
            _cxx: g++-9
            _pkg: ppa:ubuntu-toolchain-r/test

    steps:

      - uses: actions/checkout@v1

      - uses: actions/setup-python@v1
        with:
          python-version: 3.x
          architecture: x64

      - name: ${{ matrix._name }}
        env:
          _CXX: ${{ matrix._cxx }}
          _PKG: ${{ matrix._pkg }}
        run: |
          # set the maximum number of cores supported on GitHub dockers
          JOBS=$(nproc --all)
          echo "Using ${JOBS} processors"

          # dependencies required by the CI are installed in ${BUILD_DIR}/deps/
          DEPS_DIR="deps"
          mkdir -p "${DEPS_DIR}"

          # add LLVM public keys for Clang compilers
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

          # set the proper C++ and MPI compilers
          sudo add-apt-repository "${_PKG}" -y
          sudo apt install ${_CXX} -y
          export CXX=${_CXX}
          export OMPI_CXX=${_CXX}

          # install necessary packages
          sudo apt install libhwloc-dev libopenmpi-dev openmpi-bin libtool

          # set versions and URLs for requirements
          SST_VER="9.1.0"
          SST_CORE_URL="https://github.com/sstsimulator/sst-core/releases/download/v${SST_VER}_Final/"

          # curl SST Core
          curl -L ${SST_CORE_URL}sstcore-${SST_VER}.tar.gz | tar xz -C ${DEPS_DIR}
          mkdir -p ~/.sst && touch ~/.sst/sstsimulator.conf

          # install SST Core
          cd ${DEPS_DIR}/sstcore-${SST_VER} && ./configure && make -j${JOBS} all && sudo make install && cd -

          # run tests
          python -m venv .venv
          source .venv/bin/activate
          source setup.sh
          python -m tests.__init__
